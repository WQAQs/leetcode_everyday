'''
309. 最佳买卖股票时机含冷冻期
给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
'''

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n == 0 or n == 1: return 0
        dp_0, dp_1 =  0, -prices[0] # 前一天不持有股票的最大获利/持有股票的最大获利
        dp_0_pre = 0
        for i in range(1, n):

            i_not_have = max(dp_1 + prices[i], dp_0) # 第i天不持有股票的最大获利：两种情况取最大 
                                                     # (1) 前一天不持有 （2）前一天持有，第i天卖出
            i_have = b = max(dp_1, dp_0_pre - prices[i]) # 第i天持有股票的最大获利: 两种情况取最大 
                                                # (1)前一天持有 
                                                #（2）大前天不持有，第i天买进（因为买进卖出次数不受限制，而有冷冻期，所以在第i天买进的时候，一定要渡过冷冻期，所以只能用i-2的状态，即使用dp_0_pre保存大前天的状态，只有这点和122题不一样）
            dp_0_pre = dp_0                            
            dp_0, dp_1 = i_not_have, i_have
        return i_not_have